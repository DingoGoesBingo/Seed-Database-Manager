cat(paste(paste("WL0001", "Species", sep = "   "), paste("Name", "Date", sep = "   "), sep = "\n"))
source("~/GitHub/Seed-Database-Manager/Scripts/Label_Printing_Script.R", echo=TRUE)
shiny::runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
print.info = read.csv(file)
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
install.packages("officer")
install.packages("officer")
shiny::runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
?body_replace_all_text()
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
if (!requireNamespace("getPass", quietly = TRUE)) {
install.packages("getPass")
}
if (!requireNamespace("sodium", quietly = TRUE)) {
install.packages("sodium")
}
if (!requireNamespace("RPostgres", quietly = TRUE)) {
install.packages("RPostgres")
}
if (!requireNamespace("DBI", quietly = TRUE)) {
install.packages("DBI")
}
library(getPass)
if (!requireNamespace("getPass", quietly = TRUE)) {
install.packages("getPass")
}
if (!requireNamespace("getPass", quietly = TRUE)) {
install.packages("getPass")
}
if (!requireNamespace("sodium", quietly = TRUE)) {
install.packages("sodium")
}
if (!requireNamespace("RPostgres", quietly = TRUE)) {
install.packages("RPostgres")
}
if (!requireNamespace("DBI", quietly = TRUE)) {
install.packages("DBI")
}
library(getPass)
library(sodium)
library(RPostgres)
library(DBI)
?sprintf
new_note = sprintf("[%s] [%s]: %s", "current_datetime","researcher", "note_text")
new_note
source("~/GitHub/Seed-Database-Manager/Scripts/RailwayScripts.R")
con = concon()
con = concon()
dbGet()
dbGet(con)
dbGet(con)
dbGet(con)
dbGet = function(con) {
# Load in the require packages
library(getPass)
library(sodium)
library(RPostgres)
library(DBI)
table_name = "wl_database"
# list table
selected_columns = dbListFields(con, table_name)
# SQL query
columns_str = paste(sprintf('"%s"', selected_columns), collapse = ", ")
query = sprintf("SELECT %s FROM %s;", columns_str, table_name)
data = dbGetQuery(con, query)
colnames(data) = c("Code", "Accession", "Source", "Prox_Source", "Add_ID_1", "Add_ID_2, Species", "Researcher", "DoE", "Desc")
write.csv(data, "../Database/WL_Database.csv", row.names = FALSE)
}
dbGet(concon())
dbGet = function(con) {
# Load in the require packages
library(getPass)
library(sodium)
library(RPostgres)
library(DBI)
table_name = "wl_database"
# list table
selected_columns = dbListFields(con, table_name)
# SQL query
columns_str = paste(sprintf('"%s"', selected_columns), collapse = ", ")
query = sprintf("SELECT %s FROM %s;", columns_str, table_name)
data = dbGetQuery(con, query)
colnames(data) = c("Code", "Accession", "Source", "Prox_Source", "Add_ID_1", "Add_ID_2", "Species", "Researcher", "DoE", "Desc")
write.csv(data, "../Database/WL_Database.csv", row.names = FALSE)
}
dbGet(concon())
shiny::runApp('~/GitHub/Seed-Database-Manager/Application')
library(pak)
install.packages("pak")
?install.packages()
?sodium
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/RailwayScripts.R")
install.packages("pak")
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/RailwayScripts.R")
con = concon()
as.character(Sys.Date())
dbRegister(con, "WL0001", "Coker 310", "External", "University of Arizona", "SA1184", "PI529249", "Gossypium hirsutum", "schafe43", as.character(Sys.Date()), "Seed sent by Duke Pauli")
shiny::runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
source("RailwayScripts.R")
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
"lee" %in% c("pee", "poo")
"pee" %in% c("pee", "poo")
which("pee" %in% c("pee", "poo"))
which("poo" %in% c("pee", "poo"))
which("poo" %in% as.data.frame(c("pee", "poo")))
test = c("Code", "Accession", "Source", "Prox_Source", "Add_ID_1", "Add_ID_2", "Species", "Researcher", "DoE", "Desc")
test = c(test, "Accession_Name")
test[which("Accession_Name" %in% test)]
test[which(test == "Accession_Name")]
which(test == "Accession_Name")
test = test[-which(test == "Accession_Name")]
test
dbGet = function(con) {
# Load in the require packages
library(pak)
library(getPass)
library(sodium)
library(RPostgres)
library(DBI)
table_name = "wl_database"
# list table
selected_columns = dbListFields(con, table_name)
# SQL query
columns_str = paste(sprintf('"%s"', selected_columns), collapse = ", ")
query = sprintf("SELECT %s FROM %s;", columns_str, table_name)
data = dbGetQuery(con, query)
colnames(data) = c("Code", "Accession", "Source", "Prox_Source", "Add_ID_1", "Add_ID_2", "Species", "Researcher", "DoE", "Desc")
# Sometimes Accession_Name manifests itself as a distinct column, I'll force them to comply
if("accession_name" %in% tolower(colnames(data)) && ncol(data) > 10){
for(jackal in 1:nrow(data)){
if(is.na(data[jackal,2]) == TRUE || data[jackal,2] == ""){
data[jackal,2] = data[jackal,which(tolower(names(data)) == "accession_name")]
}
}
data = data[,-which(tolower(names(data)) == "accession_name")]
}
write.csv(data, "../Database/WL_Database.csv", row.names = FALSE)
}
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
test = as.data.frame(read.csv("../Database/WL_Database.csv"))
View(test)
test2 = datafix(test)
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
View(test)
test %>% order(test)
test[order(test$Code),]
test[order(-test$Code),]
test2 = test[sample(nrow(test)),]
View(test2)
test2[order(test2$Code),]
library(devtools)
install_github("nagdevAmruthnath/minio.s3")
library(pak)
library(getPass)
library(sodium)
library(RPostgres)
library(DBI)
?getPass
source("~/GitHub/Seed-Database-Manager/Scripts/RailwayScripts.R", echo=TRUE)
conLogin(concon(), "schafe43", "AsrielFluffBoi19")
conLogin(concon(), "schafe43", "AsrielFluffBoi1")
shiny::runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
conLogin(con, input$Username, input$Password)
conLogin(con, "schafe43", "balls")
conLogin(con, "schafe43", "AsrielFluffBoi19")
conLogin(concon(), "schafe43", "AsrielFluffBoi19")
conLogin(concon(), "schafe43", "balls")
conLogin(concon(), "peentis", "balls")
conLogin(concon(), "peentis", "AsrielFluffBoi19")
con = concon()
users = dbGetQuery(con, "SELECT username FROM users;")
View(users)
"schafe43" %in% users
"peentis" %in% users
source("~/GitHub/Seed-Database-Manager/Scripts/SDM_Main_Script.R", echo=TRUE)
conLogin(concon(), "peentis", "Bawls")
conLogin(concon(), "schafe43", "Bawls")
conLogin(concon(), "schafe43", "AsrielFluffBoi19")
runApp('~/GitHub/Seed-Database-Manager/Application')
?reactiveValues
runApp('~/GitHub/Seed-Database-Manager/Application')
AUTHENTICATED = reactiveValues(var = FALSE)
View(AUTHENTICATED)
View(AUTHENTICATED)
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
60000*10
?reactiveTimer
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
?passwordInput
runApp('~/GitHub/Seed-Database-Manager/Application')
runApp('~/GitHub/Seed-Database-Manager/Application')
data = read.csv("../Database/WL_Database.csv")
View(data)
shiny::runApp('~/GitHub/Seed-Database-Manager/Application')
generate_researcher_table = function(con) {
# Create the 'users' table if it doesn't exist
dbExecute(con, "
CREATE TABLE IF NOT EXISTS researchers (
username TEXT PRIMARY KEY
);
")
cat("Users table created or already exists.\n")
}
generate_researcher_table(concon())
users = dbGetQuery(con, "SELECT username FROM researchers;")
users = dbGetQuery(concon(), "SELECT username FROM researchers;")
View(users)
# Always leave the first option blank, it's required for the drop-down text in the app.
# New researchers must be added manually on Railway.
Researcher_List = list("" ,"sbogati", "sjamshi", "schafe43", "ting15", "lvargasr", "drwang", "jdanao")
View(Researcher_List)
users = as.list(users)
View(users)
users = dbGetQuery(concon(), "SELECT username FROM researchers;")
users = as.vector(dbGetQuery(concon(), "SELECT username FROM researchers;"))
View(users)
users = as.vector(unlist(dbGetQuery(concon(), "SELECT username FROM researchers;")))
c("", as.vector(unlist(dbGetQuery(concon(), "SELECT username FROM researchers;"))))
# Always leave the first option blank, it's required for the drop-down text in the app.
# New researchers must be added manually on Railway.
Researcher_List = list("" ,"sbogati", "sjamshi", "schafe43", "ting15", "lvargasr", "drwang", "jdanao")
Researcher_list_test = list(c("", as.vector(unlist(dbGetQuery(concon(), "SELECT username FROM researchers;")))))
View(Researcher_list_test)
Researcher_list_test = as.list(c("", as.vector(unlist(dbGetQuery(concon(), "SELECT username FROM researchers;")))))
View(Researcher_list_test)
runApp('~/GitHub/Seed-Database-Manager/Application')
Existing.Entries = 99
if(Existing.Entries+1 < 10){
# Creates the correct lab code for the first 9 entries
Entry.No = paste("000", as.character(Existing.Entries+1), sep = "")
} else if(Existing.Entries+1 > 9 && Existing.Entries < 100){
# Creates the correct lab code for entries 10 through 99
Entry.No = paste("00", as.character(Existing.Entries+1), sep = "")
} else if(Existing.Entries+1 > 99 && Existing.Entries < 1000){
# Creates the correct lab code for entries 100 through 999
Entry.No = paste("0", as.character(Existing.Entries+1), sep = "")
} else {
# Creates the correct lab code for entries 1000 through 9999
Entry.No = as.character(Existing.Entries+1)
}
Existing.Entries = 99
if(Existing.Entries+1 < 10){
# Creates the correct lab code for the first 9 entries
Entry.No = paste("000", as.character(Existing.Entries+1), sep = "")
} else if(Existing.Entries+1 > 9 && Existing.Entries+1 < 100){
# Creates the correct lab code for entries 10 through 99
Entry.No = paste("00", as.character(Existing.Entries+1), sep = "")
} else if(Existing.Entries+1 > 99 && Existing.Entries+1 < 1000){
# Creates the correct lab code for entries 100 through 999
Entry.No = paste("0", as.character(Existing.Entries+1), sep = "")
} else {
# Creates the correct lab code for entries 1000 through 9999
Entry.No = as.character(Existing.Entries+1)
}
Existing.Entries = 999
if(Existing.Entries+1 < 10){
# Creates the correct lab code for the first 9 entries
Entry.No = paste("000", as.character(Existing.Entries+1), sep = "")
} else if(Existing.Entries+1 > 9 && Existing.Entries+1 < 100){
# Creates the correct lab code for entries 10 through 99
Entry.No = paste("00", as.character(Existing.Entries+1), sep = "")
} else if(Existing.Entries+1 > 99 && Existing.Entries+1 < 1000){
# Creates the correct lab code for entries 100 through 999
Entry.No = paste("0", as.character(Existing.Entries+1), sep = "")
} else {
# Creates the correct lab code for entries 1000 through 9999
Entry.No = as.character(Existing.Entries+1)
}
View(data)
strsplit(data$Code, "WL")
?grepl(data$Code, "WL")
sub("WL", "", data$Code)
as.numeric(sub("WL", "", data$Code))
data$tmpcol = as.numeric(sub("WL", "", data$Code)) # need a temporary column
data = data[order(data$tmpcol),] #order numerically
data = data[,-"tmpcol"]# Remove row
data = data[,-tmpcol]# Remove row
data = data[,1:10]# Remove column
source("~/.active-rstudio-document")
test
shiny::runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
data$Code
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
data$Code
"WL0001" %in% data$Code
"WL0018" %in% data$Code
# dataset = reactive(data)
dataset = reactive(datafix(data))
dataset()
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
?radioButtons
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
?textInput
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
?column
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
test = dbcollapse(data)
test
grepl(tolower("WL0001"), tolower(dbcollapse(data)))
data[grepl(tolower("WL0001"), tolower(dbcollapse(data))),]
which(grepl(tolower("WL0001"), tolower(dbcollapse(data))))
which(grepl(tolower("WL0003"), tolower(dbcollapse(data))))
which(grepl(tolower("WL0001"), tolower(dbcollapse(data)))):which(grepl(tolower("WL0004"), tolower(dbcollapse(data))))
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
data[which,c(1,7,9,8)]
"WL0001" %in% data$Code
grepl("WL0001", data$Code)
which(grepl("WL0001", data$Code))
subset = "test"
?downloadHandler
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
source("../Scripts/Label_Printing_Script.R")
source("../Scripts/Database_Collapse_Script.R")
source("../Scripts/Database_Fix_Script.R")
source("../Scripts/SDM_Main_Script.R")
shiny::runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
data = datafix(as.data.frame(read.csv("../Database/WL_Database.csv"))); data[grepl(tolower(input$DTSearch), tolower(dbcollapse(data))),]
data[grepl(tolower("WL0001"), tolower(dbcollapse(data))),]
data[grepl(tolower("WL0001"), tolower(dbcollapse(data))),1]
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
?zip
as.vector(data[grepl(tolower("WL0001"), tolower(dbcollapse(data))),1])
as.vector(data[which(grepl(tolower("WL0001"), tolower(dbcollapse(data)))):which(grepl(tolower("WL0010"), tolower(dbcollapse(data)))),1])
label_controller(as.vector(data[which(grepl(tolower("WL0001"), tolower(dbcollapse(data)))):which(grepl(tolower("WL0010"), tolower(dbcollapse(data)))),1]))
codeList = label_controller(as.vector(data[which(grepl(tolower("WL0001"), tolower(dbcollapse(data)))):which(grepl(tolower("WL0010"), tolower(dbcollapse(data)))),1]))
codeList = as.vector(data[which(grepl(tolower("WL0001"), tolower(dbcollapse(data)))):which(grepl(tolower("WL0010"), tolower(dbcollapse(data)))),1])
codeList[1]
data[which(grepl(codeList[jackal], data$Code)),]
data[which(grepl(codeList[1], data$Code)),]
as.data.frame("WL0001", "Oryza sativa", "2025-01-04", "drwang")
as.data.frame(c("WL0001", "Oryza sativa", "2025-01-04", "drwang"))
data.frame(c("WL0001", "Oryza sativa", "2025-01-04", "drwang"), nrow = 1, ncol = 4)
data.frame("WL0001", "Oryza sativa", "2025-01-04", "drwang")
data.frame("WL0001", "Oryza sativa", "2025-01-04", "drwang") %>% names() = c("Code", "Species", "DoE", "Researcher")
test = data.frame("WL0001", "Oryza sativa", "2025-01-04", "drwang"); names(test) = c("Code", "Species", "DoE", "Researcher")
View(test)
label_controller(as.vector(data[which(grepl(tolower("WL0001"), tolower(dbcollapse(data)))):which(grepl(tolower("WL0010"), tolower(dbcollapse(data)))),1]))
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/Label_Printing_Script.R")
label_controller(as.vector(data[which(grepl(tolower("WL0001"), tolower(dbcollapse(data)))):which(grepl(tolower("WL0010"), tolower(dbcollapse(data)))),1]))
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/Label_Printing_Script.R")
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/Label_Printing_Script.R")
label_controller(as.vector(data[grepl(tolower("WL0001"), tolower(dbcollapse(data))),1]))
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/Label_Printing_Script.R")
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
library(officer)
label_template = read_docx("../Template/Blank_Label_Template.docx")
temp_summ = docx_summary(label_template)
# This list will be used to coordinate sticker placement on the document
chronological_list = temp_summ$text[c(1:9,21:29,41:49)]
which(chronological_list == "L1")
which(chronological_list == "M3")
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
labPos = read.table("../Temporary/LabelRem/pos.txt")[1,1]
# pos = 1 # Label sheet position
pos = which(chronological_list == labPos)
labPos = read.table("../Temporary/LabelRem/pos.txt")[1,1]
# pos = 1 # Label sheet position
pos = which(chronological_list == labPos)
# pos = 1 # Label sheet position
pos = as.numeric(which(chronological_list == labPos))
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
chronological_list[pos]
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
list.files("../Temporary/RegPrintInfo/")
length(list.files("../Temporary/RegPrintInfo/"))
which(chronological_list == labPos)
which(chronological_list == labPos)-length(list.files("../Temporary/RegPrintInfo/"))
chronological_list[which(chronological_list == labPos)-length(list.files("../Temporary/RegPrintInfo/"))]
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
file.exists("../Temporary/LabelRem/pos.txt")
file.exists("../Temporary/LabelRem/batch_pos.txt")
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/SDM_Main_Script.R")
View(concon)
source("../Scripts/SDM_Main_Script.R")
con = concon()
query_all_constraints <- "
SELECT
c.column_name,
CASE
WHEN pk.column_name IS NOT NULL THEN 'PRIMARY KEY'
WHEN uq.column_name IS NOT NULL THEN 'UNIQUE'
WHEN nn.column_name IS NOT NULL THEN 'NOT NULL'
ELSE 'NONE'
END AS constraint_type
FROM
information_schema.columns c
LEFT JOIN (
SELECT kcu.column_name
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu
ON tc.constraint_name = kcu.constraint_name
WHERE tc.table_name = 'wl_database'
AND tc.constraint_type = 'PRIMARY KEY'
) pk ON c.column_name = pk.column_name
LEFT JOIN (
SELECT kcu.column_name
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu
ON tc.constraint_name = kcu.constraint_name
WHERE tc.table_name = 'wl_database'
AND tc.constraint_type = 'UNIQUE'
) uq ON c.column_name = uq.column_name
LEFT JOIN (
SELECT column_name
FROM information_schema.columns
WHERE table_name = 'wl_database'
AND is_nullable = 'NO'
) nn ON c.column_name = nn.column_name
WHERE c.table_name = 'wl_database';"
constraints_info <- dbGetQuery(con, query_all_constraints)
print(constraints_info)
query_all_constraints_with_types = "
SELECT
c.column_name,
c.data_type,
CASE
WHEN pk.column_name IS NOT NULL THEN 'PRIMARY KEY'
WHEN uq.column_name IS NOT NULL THEN 'UNIQUE'
WHEN nn.column_name IS NOT NULL THEN 'NOT NULL'
ELSE 'NONE'
END AS constraint_type
FROM
information_schema.columns c
LEFT JOIN (
SELECT kcu.column_name
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu
ON tc.constraint_name = kcu.constraint_name
WHERE tc.table_name = 'wl_database'
AND tc.constraint_type = 'PRIMARY KEY'
) pk ON c.column_name = pk.column_name
LEFT JOIN (
SELECT kcu.column_name
FROM information_schema.table_constraints tc
JOIN information_schema.key_column_usage kcu
ON tc.constraint_name = kcu.constraint_name
WHERE tc.table_name = 'wl_database'
AND tc.constraint_type = 'UNIQUE'
) uq ON c.column_name = uq.column_name
LEFT JOIN (
SELECT column_name
FROM information_schema.columns
WHERE table_name = 'wl_database'
AND is_nullable = 'NO'
) nn ON c.column_name = nn.column_name
WHERE c.table_name = 'wl_database';"
constraints_info <- dbGetQuery(con, query_all_constraints)
print(constraints_info)
constraints_info <- dbGetQuery(con, query_all_constraints_with_types)
print(constraints_info)
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/SDM_Main_Script.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/RailwayScripts.R")
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/RailwayScripts.R")
add_user(con)
shiny::runApp('~/Documents/GitHub/Seed-Database-Manager/Application')
