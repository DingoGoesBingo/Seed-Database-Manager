# SNPs need to be formatted & sig markers need to be extracted
cappuccino = c("#4b3832", "#844442", "#ccb4a4", "#3c2f2f", "#be9b7b")
colorCount = 1
color = cappuccino
pdf("../Output/LD_Decay_TestPlots.pdf")
for(seaotter in 1:length(unique(sig_SNPs$marker))){ # 1:length(unique(sig_SNPs$marker))
temp_sigrow = distinct(sig_SNPs[which(sig_SNPs$marker == unique(sig_SNPs$marker)[seaotter]),1:3])
curr_SNP = temp_sigrow$marker[1]
tpos = temp_sigrow$pos[1]
tpos_downstream = tpos-500000; tpos_upstream = tpos+500000 # Within 500kb of the significant SNP
curr_LG = temp_sigrow$chrom[1]
batch_SNPs = Geninfo[which(Geninfo$LG == curr_LG & Geninfo$Position > tpos_downstream & Geninfo$Position < tpos_upstream), "Locus"] # Use one & for which commands!
batch_SNPs = batch_SNPs[c(which(batch_SNPs == curr_SNP), 1:(which(batch_SNPs == curr_SNP)-1), (which(batch_SNPs == curr_SNP)+1):length(batch_SNPs))]
batch_SNPs_key = as.data.frame(batch_SNPs); names(batch_SNPs_key) = "ID"
# batch_SNPs_key = as.data.frame(batch_SNPs_key[c(1,sample(2:nrow(batch_SNPs_key), floor((nrow(batch_SNPs_key)-1)/2))),]); names(batch_SNPs_key) = "ID"
# Debug text
print(paste(seaotter, curr_SNP, curr_LG, sep = ", "))
print("--------------------------------------------")
temp = left_join(batch_SNPs_key, Genos, "ID"); temp = t(temp[,10:ncol(temp)])
colnames(temp) = batch_SNPs_key$ID
names(batch_SNPs_key) = "Locus"; temp_info = left_join(batch_SNPs_key, Geninfo, "Locus")
temp_info$LG = as.numeric(temp_info$LG); temp_info$Position = as.numeric(temp_info$Position)
# LD Decay calculation using the sommer package!
temp.LD = LD.decay(temp, temp_info, silent=FALSE, unlinked=FALSE, gamma=0.95)[[1]][[curr_LG]]
# obj.LD = LD.decay(temp, temp_info, silent=FALSE, unlinked=FALSE, gamma=0.95)
# snp_p.LD = obj.LD[[3]][[curr_LG]][seq(1,length(obj.LD[[3]][[curr_LG]]),length(batch_SNPs))]
# temp.LD = obj.LD[[1]][[curr_LG]]
# reverse engineering the LD.decy function because we just want the comparison of the one SNP
sample.temp.LD = temp.LD[which(temp.LD$d == 0)+1,]
# sample.temp.LD = temp.LD[which(row.names(temp.LD) %in% as.character(seq(1,length(obj.LD[[3]][[curr_LG]]),length(batch_SNPs)))),]
# Before plotting (modeling, intercepts)
# bins = seq(1, max(sample.temp.LD$d), 500)
# tempFitTable = as.data.frame(bins)
#
# for(jackal in 1:length(bins)){
#
#   if(jackal == 1){
#
#     bin_temp = sample.temp.LD %>%
#       filter(d < bins[2])
#
#   } else if(jackal == length(bins)){
#
#     bin_temp = sample.temp.LD %>%
#       filter(d > bins[length(bins)])
#
#   } else {
#
#     bin_temp = sample.temp.LD %>%
#       filter(d >= bins[jackal]) %>%
#       filter(d < bins[jackal+1])
#
#   }
#
#   tempFitTable$avg[jackal] = mean(bin_temp$r2)
#
# }
#
# lois = loess(tempFitTable$avg ~ tempFitTable$bins) # Using a Loess model to find X-int
#
# loisTab = as.data.frame(cbind(bins, predict(lois, bins))); names(loisTab) = c("x", "y")
lois = loess(sample.temp.LD$r2 ~ sample.temp.LD$d)
loisTab = as.data.frame(cbind(sample.temp.LD$d, predict(lois, sample.temp.LD$d))); names(loisTab) = c("x", "y"); loisTab = loisTab %>% arrange(x)
otter = 1
LD.Value = NULL
while(otter <= length(loisTab$y) && is.null(LD.Value)){ # length(bins)
if(loisTab$y[otter] < 0.2){
LD.Value = loisTab$x[otter]
}
otter = otter + 1
}
# Update SNP table generated previously
sig_SNPs$LDdecay[which(sig_SNPs$marker == curr_SNP)] = LD.Value
# Create a plot
tempPlot = sample.temp.LD %>%
ggplot() +
geom_point(mapping = aes(x = d, y = r2), alpha = 1, color = color[colorCount]) +
geom_line(data = loisTab, mapping = aes(x = x, y = y), color = "blue") +
geom_hline(mapping = aes(yintercept = 0.2), color = "red") +
geom_vline(mapping = aes(xintercept = LD.Value), color = "purple") +
# xlim(0, max(LD.Value*4, (LD.Value+100000))) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=45, hjust = 1)) +
ggtitle(paste("LD Decay for Marker ", curr_SNP, ", chromosome ", curr_LG, sep = "")) +
ylab("R-squared Value") +
xlab("Distance") +
labs(caption = paste("Red line indicates 0.2 r^2 cutoff for LD decay. Purple line indicates distance at the cutoff./nUses n = ", nrow(batch_SNPs), " SNPs within 500kb from significant marker to calculate.", sep = ""))
plot(tempPlot)
if(colorCount == length(cappuccino)){ colorCount = 1 } else {
colorCount = colorCount + 1
}
}
dev.off()
# Export updated significant SNP table
# write_csv(sig_SNPs, "../Output/GWAS_Significant_SNPs.csv")
temp_sigrow = distinct(sig_SNPs[which(sig_SNPs$marker == unique(sig_SNPs$marker)[seaotter]),1:3])
curr_SNP = temp_sigrow$marker[1]
tpos = temp_sigrow$pos[1]
tpos_downstream = tpos-500000; tpos_upstream = tpos+500000 # Within 500kb of the significant SNP
curr_LG = temp_sigrow$chrom[1]
batch_SNPs = Geninfo[which(Geninfo$LG == curr_LG & Geninfo$Position > tpos_downstream & Geninfo$Position < tpos_upstream), "Locus"] # Use one & for which commands!
batch_SNPs = batch_SNPs[c(which(batch_SNPs == curr_SNP), 1:(which(batch_SNPs == curr_SNP)-1), (which(batch_SNPs == curr_SNP)+1):length(batch_SNPs))]
batch_SNPs_key = as.data.frame(batch_SNPs); names(batch_SNPs_key) = "ID"
View(batch_SNPs_key)
if(nrow(batch_SNPs_key) > 8000){
batch_SNPs_key = batch_SNPs_key[c(1,sample(2:nrow(batch_SNPs_key),7999)),]
}
batch_SNPs_key
# SNPs need to be formatted & sig markers need to be extracted
cappuccino = c("#4b3832", "#844442", "#ccb4a4", "#3c2f2f", "#be9b7b")
colorCount = 1
color = cappuccino
pdf("../Output/LD_Decay_TestPlots.pdf")
for(seaotter in 25:27){ # 1:length(unique(sig_SNPs$marker))
temp_sigrow = distinct(sig_SNPs[which(sig_SNPs$marker == unique(sig_SNPs$marker)[seaotter]),1:3])
curr_SNP = temp_sigrow$marker[1]
tpos = temp_sigrow$pos[1]
tpos_downstream = tpos-500000; tpos_upstream = tpos+500000 # Within 500kb of the significant SNP
curr_LG = temp_sigrow$chrom[1]
batch_SNPs = Geninfo[which(Geninfo$LG == curr_LG & Geninfo$Position > tpos_downstream & Geninfo$Position < tpos_upstream), "Locus"] # Use one & for which commands!
batch_SNPs = batch_SNPs[c(which(batch_SNPs == curr_SNP), 1:(which(batch_SNPs == curr_SNP)-1), (which(batch_SNPs == curr_SNP)+1):length(batch_SNPs))]
batch_SNPs_key = as.data.frame(batch_SNPs); names(batch_SNPs_key) = "ID"
# batch_SNPs_key = as.data.frame(batch_SNPs_key[c(1,sample(2:nrow(batch_SNPs_key), floor((nrow(batch_SNPs_key)-1)/2))),]); names(batch_SNPs_key) = "ID"
# Too many SNPs will crash R, so set a cap to ~8000 SNPs max?
if(nrow(batch_SNPs_key) > 8000){
batch_SNPs_key = batch_SNPs_key[c(1,sample(2:nrow(batch_SNPs_key),7999)),]
}
# Debug text
print(paste(seaotter, curr_SNP, curr_LG, sep = ", "))
print("--------------------------------------------")
temp = left_join(batch_SNPs_key, Genos, "ID"); temp = t(temp[,10:ncol(temp)])
colnames(temp) = batch_SNPs_key$ID
names(batch_SNPs_key) = "Locus"; temp_info = left_join(batch_SNPs_key, Geninfo, "Locus")
temp_info$LG = as.numeric(temp_info$LG); temp_info$Position = as.numeric(temp_info$Position)
# LD Decay calculation using the sommer package!
temp.LD = LD.decay(temp, temp_info, silent=FALSE, unlinked=FALSE, gamma=0.95)[[1]][[curr_LG]]
# obj.LD = LD.decay(temp, temp_info, silent=FALSE, unlinked=FALSE, gamma=0.95)
# snp_p.LD = obj.LD[[3]][[curr_LG]][seq(1,length(obj.LD[[3]][[curr_LG]]),length(batch_SNPs))]
# temp.LD = obj.LD[[1]][[curr_LG]]
# reverse engineering the LD.decy function because we just want the comparison of the one SNP
sample.temp.LD = temp.LD[which(temp.LD$d == 0)+1,]
# sample.temp.LD = temp.LD[which(row.names(temp.LD) %in% as.character(seq(1,length(obj.LD[[3]][[curr_LG]]),length(batch_SNPs)))),]
# Before plotting (modeling, intercepts)
# bins = seq(1, max(sample.temp.LD$d), 500)
# tempFitTable = as.data.frame(bins)
#
# for(jackal in 1:length(bins)){
#
#   if(jackal == 1){
#
#     bin_temp = sample.temp.LD %>%
#       filter(d < bins[2])
#
#   } else if(jackal == length(bins)){
#
#     bin_temp = sample.temp.LD %>%
#       filter(d > bins[length(bins)])
#
#   } else {
#
#     bin_temp = sample.temp.LD %>%
#       filter(d >= bins[jackal]) %>%
#       filter(d < bins[jackal+1])
#
#   }
#
#   tempFitTable$avg[jackal] = mean(bin_temp$r2)
#
# }
#
# lois = loess(tempFitTable$avg ~ tempFitTable$bins) # Using a Loess model to find X-int
#
# loisTab = as.data.frame(cbind(bins, predict(lois, bins))); names(loisTab) = c("x", "y")
lois = loess(sample.temp.LD$r2 ~ sample.temp.LD$d)
loisTab = as.data.frame(cbind(sample.temp.LD$d, predict(lois, sample.temp.LD$d))); names(loisTab) = c("x", "y"); loisTab = loisTab %>% arrange(x)
otter = 1
LD.Value = NULL
while(otter <= length(loisTab$y) && is.null(LD.Value)){ # length(bins)
if(loisTab$y[otter] < 0.2){
LD.Value = loisTab$x[otter]
}
otter = otter + 1
}
# Update SNP table generated previously
sig_SNPs$LDdecay[which(sig_SNPs$marker == curr_SNP)] = LD.Value
# Create a plot
tempPlot = sample.temp.LD %>%
ggplot() +
geom_point(mapping = aes(x = d, y = r2), alpha = 1, color = color[colorCount]) +
geom_line(data = loisTab, mapping = aes(x = x, y = y), color = "blue") +
geom_hline(mapping = aes(yintercept = 0.2), color = "red") +
geom_vline(mapping = aes(xintercept = LD.Value), color = "purple") +
# xlim(0, max(LD.Value*4, (LD.Value+100000))) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=45, hjust = 1)) +
ggtitle(paste("LD Decay for Marker ", curr_SNP, ", chromosome ", curr_LG, sep = "")) +
ylab("R-squared Value") +
xlab("Distance") +
labs(caption = paste("Red line indicates 0.2 r^2 cutoff for LD decay. Purple line indicates distance at the cutoff./nUses n = ", nrow(batch_SNPs), " SNPs within 500kb from significant marker to calculate.", sep = ""))
plot(tempPlot)
if(colorCount == length(cappuccino)){ colorCount = 1 } else {
colorCount = colorCount + 1
}
}
# SNPs need to be formatted & sig markers need to be extracted
cappuccino = c("#4b3832", "#844442", "#ccb4a4", "#3c2f2f", "#be9b7b")
colorCount = 1
color = cappuccino
pdf("../Output/LD_Decay_TestPlots.pdf")
for(seaotter in 25:27){ # 1:length(unique(sig_SNPs$marker))
temp_sigrow = distinct(sig_SNPs[which(sig_SNPs$marker == unique(sig_SNPs$marker)[seaotter]),1:3])
curr_SNP = temp_sigrow$marker[1]
tpos = temp_sigrow$pos[1]
tpos_downstream = tpos-500000; tpos_upstream = tpos+500000 # Within 500kb of the significant SNP
curr_LG = temp_sigrow$chrom[1]
batch_SNPs = Geninfo[which(Geninfo$LG == curr_LG & Geninfo$Position > tpos_downstream & Geninfo$Position < tpos_upstream), "Locus"] # Use one & for which commands!
batch_SNPs = batch_SNPs[c(which(batch_SNPs == curr_SNP), 1:(which(batch_SNPs == curr_SNP)-1), (which(batch_SNPs == curr_SNP)+1):length(batch_SNPs))]
# Too many SNPs will crash R, so set a cap to ~8000 SNPs max?
if(nrow(batch_SNPs_key) > 8000){
batch_SNPs_key = batch_SNPs_key[c(1,sample(2:nrow(batch_SNPs_key),7999)),]
}
batch_SNPs_key = as.data.frame(batch_SNPs); names(batch_SNPs_key) = "ID"
# Debug text
print(paste(seaotter, curr_SNP, curr_LG, sep = ", "))
print("--------------------------------------------")
temp = left_join(batch_SNPs_key, Genos, "ID"); temp = t(temp[,10:ncol(temp)])
colnames(temp) = batch_SNPs_key$ID
names(batch_SNPs_key) = "Locus"; temp_info = left_join(batch_SNPs_key, Geninfo, "Locus")
temp_info$LG = as.numeric(temp_info$LG); temp_info$Position = as.numeric(temp_info$Position)
# LD Decay calculation using the sommer package!
temp.LD = LD.decay(temp, temp_info, silent=FALSE, unlinked=FALSE, gamma=0.95)[[1]][[curr_LG]]
# obj.LD = LD.decay(temp, temp_info, silent=FALSE, unlinked=FALSE, gamma=0.95)
# snp_p.LD = obj.LD[[3]][[curr_LG]][seq(1,length(obj.LD[[3]][[curr_LG]]),length(batch_SNPs))]
# temp.LD = obj.LD[[1]][[curr_LG]]
# reverse engineering the LD.decy function because we just want the comparison of the one SNP
sample.temp.LD = temp.LD[which(temp.LD$d == 0)+1,]
# sample.temp.LD = temp.LD[which(row.names(temp.LD) %in% as.character(seq(1,length(obj.LD[[3]][[curr_LG]]),length(batch_SNPs)))),]
# Before plotting (modeling, intercepts)
# bins = seq(1, max(sample.temp.LD$d), 500)
# tempFitTable = as.data.frame(bins)
#
# for(jackal in 1:length(bins)){
#
#   if(jackal == 1){
#
#     bin_temp = sample.temp.LD %>%
#       filter(d < bins[2])
#
#   } else if(jackal == length(bins)){
#
#     bin_temp = sample.temp.LD %>%
#       filter(d > bins[length(bins)])
#
#   } else {
#
#     bin_temp = sample.temp.LD %>%
#       filter(d >= bins[jackal]) %>%
#       filter(d < bins[jackal+1])
#
#   }
#
#   tempFitTable$avg[jackal] = mean(bin_temp$r2)
#
# }
#
# lois = loess(tempFitTable$avg ~ tempFitTable$bins) # Using a Loess model to find X-int
#
# loisTab = as.data.frame(cbind(bins, predict(lois, bins))); names(loisTab) = c("x", "y")
lois = loess(sample.temp.LD$r2 ~ sample.temp.LD$d)
loisTab = as.data.frame(cbind(sample.temp.LD$d, predict(lois, sample.temp.LD$d))); names(loisTab) = c("x", "y"); loisTab = loisTab %>% arrange(x)
otter = 1
LD.Value = NULL
while(otter <= length(loisTab$y) && is.null(LD.Value)){ # length(bins)
if(loisTab$y[otter] < 0.2){
LD.Value = loisTab$x[otter]
}
otter = otter + 1
}
# Update SNP table generated previously
sig_SNPs$LDdecay[which(sig_SNPs$marker == curr_SNP)] = LD.Value
# Create a plot
tempPlot = sample.temp.LD %>%
ggplot() +
geom_point(mapping = aes(x = d, y = r2), alpha = 1, color = color[colorCount]) +
geom_line(data = loisTab, mapping = aes(x = x, y = y), color = "blue") +
geom_hline(mapping = aes(yintercept = 0.2), color = "red") +
geom_vline(mapping = aes(xintercept = LD.Value), color = "purple") +
# xlim(0, max(LD.Value*4, (LD.Value+100000))) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=45, hjust = 1)) +
ggtitle(paste("LD Decay for Marker ", curr_SNP, ", chromosome ", curr_LG, sep = "")) +
ylab("R-squared Value") +
xlab("Distance") +
labs(caption = paste("Red line indicates 0.2 r^2 cutoff for LD decay. Purple line indicates distance at the cutoff./nUses n = ", nrow(batch_SNPs), " SNPs within 500kb from significant marker to calculate.", sep = ""))
plot(tempPlot)
if(colorCount == length(cappuccino)){ colorCount = 1 } else {
colorCount = colorCount + 1
}
}
setwd("/Users/schafe43/Documents/GitHub/Seed-Database-Manager/Application/")
dsn_database = "railway"
dsn_hostname = "viaduct.proxy.rlwy.net"
dsn_port = "49635"
dsn_uid = "postgres"
dsn_pwd = "QEuiwJmxIhWweffSFWEgbLyfXSmCLkDR"
?gc()
tryCatch({
drv <- dbDriver("PostgreSQL")
print("Connecting to database")
conn <- dbConnect(drv,
dbname = dsn_database,
host = dsn_hostname,
port = dsn_port,
user = dsn_uid,
password = dsn_pwd)
print("Connected!")
},
error=function(cond) {
print("Unable to connect to database.")
})
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
Species_List = as.list(c("", as.vector(unlist(dbGetQuery(concon(), "SELECT species FROM species;")))))
library(RPostgres)
library(DBI)
shiny::runApp()
as.list(c("", as.vector(unlist(dbGetQuery(concon(), "SELECT species FROM species;")))))
Species_List = as.list(c("", as.vector(unlist(dbGetQuery(concon(), "SELECT species FROM species;")))))
Researcher_List = as.list(c("", as.vector(unlist(dbGetQuery(concon(), "SELECT username FROM researchers;")))))
View(Species_List)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
read.table("../Temporary/authDateTime/sys.txt")
as.POSIXct(read.table("../Temporary/authDateTime/sys.txt"))
read.table("../Temporary/authDateTime/sys.txt")
paste(read.table("../Temporary/authDateTime/sys.txt"))
paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = "")
paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")
as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " "))
as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))
as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))
as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))
as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))
as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))
as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))
shiny::runApp()
as.numeric(as.POSIXct(Sys.time()) - as.POSIXct(paste(read.table("../Temporary/authDateTime/sys.txt"), collapse = " ")))
length(list.files("../Temporary/authDatTime")) > 0
length(list.files("../Temporary/authDatTime/")) > 0
length(list.files("../Temporary/authDateTime")) > 0
runApp()
dbGetQuery(concon(), "SELECT username FROM users;")
library(pak)
library(getPass)
library(sodium)
library(RPostgres)
library(DBI)
dbGetQuery(concon(), "SELECT username FROM users;")
test = dbGetQuery(concon(), "SELECT username FROM users;")
test = as.vector(unlist(dbGetQuery(concon(), "SELECT username FROM users;")))
test = as.data.frame(read.csv("../Template/WL_Template_Example.csv"))
View(test)
test$Additional.ID
unique(test$Researcher)
test2 = as.data.frame(read.csv("/Users/schafe43/Library/CloudStorage/Box-Box/EnterIntoDatabase/AfricaSeed.csv"))
View(test2)
test2 = as.data.frame(read.csv("/Users/schafe43/Library/CloudStorage/Box-Box/EnterIntoDatabase/AfricaSeed_Test.csv"))
View(test2)
shiny::runApp()
"" %in% test2$ID
View(test2)
"RLS7252" %in% test2$ID
unique(test2$Researcher)
unique(test2$Species)
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/templatePolice.R")
as.vector(unlist(Researcher_List))
as.vector(unlist(Researcher_List))[2:8]
templatePolice(test2, as.vector(unlist(Researcher_List))[2:8], as.vector(unlist(Species_List))[2:4])
test2$ID[2] = ""
templatePolice(test2, as.vector(unlist(Researcher_List))[2:8], as.vector(unlist(Species_List))[2:4])
templatePolice(test2, as.vector(unlist(Researcher_List))[2:8], as.vector(unlist(Species_List))[2:4])
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/templatePolice.R")
templatePolice(test2, as.vector(unlist(Researcher_List))[2:8], as.vector(unlist(Species_List))[2:4])
runApp()
runApp()
runApp()
dbExecute(conn, "TRUNCATE TABLE test_database;")
dbExecute(concon(), "TRUNCATE TABLE test_database;")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NULL == TRUE
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(test)
runApp()
runApp()
test = as.data.frame(read.csv("/Users/schafe43/Library/CloudStorage/Box-Box/EnterIntoDatabase/Betatesting/AfricaSeed_Test_Proxmissing.csv"))
View(test)
templatePolice(test, c("drwang"), c("Oryza sativa"))
unique(test$Species)
unique(test$Source..Internal.or.External.)
unique(test$Source..Internal.or.External.) %in% c("External", "Internal")
templatePolice(test, c("drwang"), c("Oryza sativa"))
source("~/Documents/GitHub/Seed-Database-Manager/Scripts/templatePolice.R")
templatePolice(test, c("drwang"), c("Oryza sativa"))
runApp()
runApp()
runApp()
runApp()
read.table("../Setup/UserSettings.rtf")
read.table("../Setup/UserSettings.rtf")
read.table("../Setup/UserSettings.rtf")
read.table("../Setup/UserSettings.rtf", sep = " = ")
read.table("../Setup/UserSettings.rtf", sep = "=")
read.table("../Setup/UserSettings.rtf")
read.table("../Setup/UserSettings.txt")
read.table("../Setup/UserSettings.txt", sep = "=")
read.table("../Setup/UserSettings.txt", sep = " = ")
read.table("../Setup/UserSettings.txt", sep = "=")
params = read.table("../Setup/UserSettings.txt", sep = "=")
View(params)
params = read.table("../Setup/UserSettings.txt", sep = "=")[1:5,1]
params
concon = function(){
# Load in the require packages
library(pak)
library(getPass)
library(sodium)
library(RPostgres)
library(DBI)
# Connect using the dbConnect function with the Railway parameters
params = read.table("../Setup/UserSettings.txt", sep = "=")[1:5,1]
con = dbConnect(
RPostgres::Postgres(),
dbname = params[1],                           # Database name
host = params[2],             # Public host for external connections
port = as.numeric(params[3]),                                 # The port from the public network connection
user = params[4],                            # Default username
password = params[5] # Your password
)
# Check the connection, return database connection if successful.
if (dbIsValid(con)) {
return(con)
}
}
concon()
params = read.table("../Setup/UserSettings.txt", sep = "=")[6:7,1]
# Customization parameters
params = read.table("../Setup/UserSettings.txt", sep = "=")
View(params)
# Customization parameters
params = read.table("../Setup/UserSettings.txt", sep = "=")[,1]
params
shiny::runApp()
runApp()
library(base64enc)
runApp()
?img()
runApp()
runApp()
shiny::runApp()
params = read.table("../Setup/UserSettings.txt")
params = read.table("../Setup/UserSettings.txt", sep = "=")
params = read.table("../Setup/UserSettings.txt", sep = "=")[,1]
params
runApp()
runApp()
shiny::runApp()
as.vector("TRUE")
as.logical("TRUE")
test = read.table("../Setup/UserSettings.txt")
test = read.table("../Setup/UserSettings.txt")[,1]
test = read.table("../Setup/UserSettings.txt", sep = "=")[,1]
test
as.logical(test[11])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file.exists("../Setup/groupImage/group.png"
)
runApp()
runApp()
runApp()
runApp()
runApp()
